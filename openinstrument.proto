syntax = "proto3";

package openinstrument.proto;

message LogMessage {
  uint64 timestamp = 1;
	uint64 end_timestamp = 3;
  string message = 2;
}

message OperationLog {
	repeated LogMessage log = 1;
}

message StreamVariable {
  enum ValueType {
    UNKNOWN = 0;
    GAUGE = 1;
    RATE = 2;
  }
  string name = 1;
  map<string, string> label = 2;
  ValueType type = 3;

  // Milliseconds since epoch, or if negative, milliseconds before now.
	int64 min_timestamp = 4;
	int64 max_timestamp = 5;
}

// Mutations return a modified copy of every input query
message StreamMutation {
  enum SampleType {
    // Do not modify the data at all
    NONE = 0;
    // Average out values between each sampling point
    MEAN = 1;
    // Get the maximum value between each sampling point
    MAX = 2;
    // Get the minimum value between each sampling point
    MIN = 3;
    // Get the positive rate between each sampling point
    RATE = 4;
    // Get the (possibly) negative rate between each sampling point
    RATE_SIGNED = 5;
		// Modify timestamps and values so that frequency (interval between consecutive samples) is constant (specify in param)
		// Extra values between each sample will be aggregated according to <sample_type>.
		// Gaps in the stream less than <max_gap_interpolate> samples will be filled with interpolated values between the
		// closest real values.
		INTERPOLATE = 6;
    // Last point in a time bracket (specified in param)
    LAST = 7;
    // First point in a time bracket (specified in param)
    FIRST = 8;
    // Multiply all values by a constant (specify in param)
    MULTIPLY = 9;
    // Add a constant to each value (specify in param)
    ADD = 10;
		// Get the nth root of each value (specify in param)
		ROOT = 11;
		// Get the nth power of each value (specify in param)
		POWER = 12;
		// Moving average over a time period (specified in param)
		MOVING_AVERAGE = 13;
  }
  SampleType type = 1;

	double param = 2;

	// Input query
  Query query = 3;

  // Gaps in the stream of more than <max_gap_interpolate> samples will not be filled.
  uint32 max_gap_interpolate = 4;
	uint32 sample_frequency = 5;
}

// Aggregations return a single output stream, built from the combination of every input query
message StreamAggregation {
  enum AggregateType {
    // Do not aggregate between streams
    NONE = 0;
    // Get the mean of all values at a common time across streams
    MEAN = 1;
    // Get the maximum of all values at a common time across streams
    MAX = 2;
    // Get the minimum of all values at a common time across streams
    MIN = 3;
    // Get the median of all values at a common time across streams
    MEDIAN = 4;
    // Get the total of all values at a common time across streams
    SUM = 5;
    // Get the standard deviation of all values at a common time across streams
    STDDEV = 6;
    // Get a particular percentile (provided in param) of all values at a common time across streams
    PERCENTILE = 7;
  }
  AggregateType type = 1;

  // Labels to aggregate by on the input streams. If no labels are specified, aggregation will be done on the variable
  // only.
  repeated string label = 2;

  // Points will be aggregated if they are less than sample_interval ms apart. Default is 30 seconds.
  uint32 sample_interval = 3;

	// Optional parameter
	double param = 4;

	// Input query
  repeated Query query = 5;
}

message Value {
  // Milliseconds since epoch
  uint64 timestamp = 1;
	oneof value {
		double double = 2;
		string string = 3;
	}

  // Used for run-length encoding
  uint64 end_timestamp = 4;
}

message ValueStream {
  StreamVariable variable = 2;
  repeated Value value = 4;

  // An optional set of mutations that have been applied to this stream.
  // If the stream contains the raw data, this should be empty.
  repeated StreamMutation mutation = 5;
}

// Queries return a stream for every input variable / mutation / aggregation
message Query {
	repeated StreamVariable variable = 1;
	repeated StreamMutation mutation = 2;
	repeated StreamAggregation aggregation = 3;

  repeated double constant = 4;
}

message GetRequest {
	Query query = 1;

	// deprecated
  StreamVariable variable = 9 [deprecated=true];

  // If mutations or aggregations are supplied, the GetResponse will have a separate stream for each change requested.
  repeated StreamMutation mutation = 6 [deprecated=true];
  repeated StreamAggregation aggregation = 7 [deprecated=true];

  // Limit to how many variables can be returned in a standard GetRequest. This can be overridden if required.
  uint32 max_variables = 8;

  // This request has been forwarded by another store server and should not be forwarded again.
  // This shouldn't happen but is here as a failsafe.
  bool forwarded = 10;

  // Limit the number of values that can be returned for each variable.
  uint32 max_values = 11;
}

message GetResponse {
  bool success = 1;
  string errormessage = 2;

  // Contains a separate stream for every mutation requested in GetRequest, in the same order. If no mutations are
  // requested, the response will contain a single stream of the raw data.
  repeated ValueStream stream = 3;
  repeated LogMessage timer = 4;
}

message AddRequest {
  repeated ValueStream stream = 1;

  // This request has been forwarded by another store server and should not be forwarded again.
  // This shouldn't happen but is here as a failsafe.
  bool forwarded = 2;
}

message AddResponse {
  bool success = 1;
  string errormessage = 2;
  repeated LogMessage timer = 3;
	uint32 streams = 4;
	uint32 values = 5;
}

message ListRequest {
  StreamVariable prefix = 3;

  // Limit to how many variables can be returned in a standard ListRequest. This can be overridden if required.
  uint32 max_variables = 2;
}

message ListResponse {
  bool success = 1;
  string errormessage = 2;

  // Although this uses the ValueStream for returning a list of variables, the expectation is that the value field is
  // empty.
  repeated ValueStream stream = 3;
  repeated StreamVariable variable = 4;
  repeated LogMessage timer = 5;
}

message BlockHeaderIndex {
  StreamVariable variable = 1;
  fixed64 offset = 2;
  fixed32 num_values = 3;
  fixed64 min_timestamp = 4;
  fixed64 max_timestamp = 5;
}

message BlockHeader {
  uint32 version = 6;
  uint64 start_timestamp = 1;
  uint64 end_timestamp = 2;
  repeated BlockHeaderIndex index = 5;
  string end_key = 7;
}

message RetentionPolicyItem {
  enum Target {
    KEEP = 0;
    DROP = 1;
  }
  repeated StreamVariable variable = 1;
  repeated string comment = 2;
  Target policy = 3;

  repeated StreamMutation mutation = 4;
}

message RetentionPolicy {
  repeated RetentionPolicyItem policy = 1;
  uint32 interval = 2;
}

message ClusterMember {
  enum State {
    UNKNOWN = 0;
    LOAD = 1;
    RUN = 2;
    DRAIN = 3;
    READONLY = 4;
    SHUTDOWN = 5;
  }
  string address = 1;
  State state = 2;
  uint64 last_updated = 3;
	string name = 4;
}

message ClusterConfig {
  repeated ClusterMember server = 1;
	repeated Block block = 2;
  RetentionPolicy retention_policy = 3;
}

message Block {
	enum State {
		UNKNOWN = 0;
		LOADING = 1;
		LIVE = 2;
		COMPACTING = 3;
		MIGRATING = 4;
		UNLOADING = 5;
		UNLOADED = 6;
		DESTROYED = 7;
	}
	BlockHeader header = 17;
  string id = 1;
  string end_key = 2;
	State state = 3;
  uint32 indexed_streams = 4;
  uint32 indexed_values = 5;
  uint32 logged_streams = 6;
  uint32 logged_values = 7;
  uint32 unlogged_streams = 8;
  uint32 unlogged_values = 9;
  string compact_duration = 10;
	uint64 compact_start_time = 11;
	uint64 compact_end_time = 12;

	string node = 13;
	string destination_node = 14;
  uint64 last_updated = 16;

	// Bytes
	uint32 size = 18;
}

message LookupBlockRequest {
	StreamVariable variable = 1;
	string block_id = 2;
}

message LookupBlockResponse {
  Block block = 1;
}

message SplitBlockRequest {
  Block block = 1;
}

message SplitBlockResponse {
  repeated Block block = 1;
}

message JoinBlockRequest {
  // This the last block in the sequence. The block with the previous end key
  // will be joined with this one, so the output block will have the same end
  // key, but a different ID.
  Block block = 1;
}

message JoinBlockResponse {
  Block block = 1;
}

message CompactBlockRequest {
  Block block = 1;
}

message CompactBlockResponse {
  Block block = 1;
}

message GetClusterRequest {
}

message GetClusterResponse {
	ClusterConfig config = 1;
}

message JoinClusterRequest {
	ClusterMember member = 1;
}

message JoinClusterResponse {
	repeated ClusterMember member = 1;
}

message UpdateClusterRequest {
	repeated ClusterMember member = 1;
}

message UpdateClusterResponse {
	repeated ClusterMember member = 1;
}

message WatchClusterRequest {
}

message WatchClusterResponse {
	ClusterConfig config = 1;
}

message UpdateRetentionPolicyRequest {
	enum Operation {
		UNKNOWN = 0;
		APPEND = 1;
		INSERT = 2;
		REMOVE = 3;
	}
	Operation op = 1;
	RetentionPolicyItem item = 2;

	// 0-indexed position for insert or remove
	uint32 position = 3;
}

message UpdateRetentionPolicyResponse {
	RetentionPolicy policy = 1;
}

service Store {
  rpc List(ListRequest) returns (ListResponse);
  rpc Get(GetRequest) returns (stream GetResponse);
  rpc Add(stream AddRequest) returns (stream AddResponse);

  rpc UpdateRetentionPolicy(UpdateRetentionPolicyRequest) returns (UpdateRetentionPolicyResponse);

  rpc LookupBlock(LookupBlockRequest) returns (LookupBlockResponse);
  rpc SplitBlock(SplitBlockRequest) returns (SplitBlockResponse);
  rpc JoinBlock(JoinBlockRequest) returns (JoinBlockResponse);
  rpc CompactBlock(CompactBlockRequest) returns (CompactBlockResponse);

	rpc GetCluster(GetClusterRequest) returns (GetClusterResponse);

	rpc WatchCluster(WatchClusterRequest) returns (stream WatchClusterResponse);
}
